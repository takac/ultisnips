###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method 

global !p
types = ['String', 'Date', 'Calendar', 'void', 'long', 'Long', 'int', 'Integer', 'Double', 'double']
modifiers = ['public', 'private', 'static', 'final', 'synchronized', 'transient', 'protected', 'abstract']
def junit(snip):
    if snip.opt("g:ultisnips_java_junit", "") == "3":
        snip += ""
    else:
        snip.rv += "@Test\n\t"

def nl(snip):
    if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
        snip += ""
    else:
        snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if len(word) > 0:
		return word[0].upper() + word[1:]
	else:
		return ""

def rCamel(word):
	if len(word) > 0:
		return word[0].lower() + word[1:]
	else:
		return ""
def complete(word, opts, complete_blank=False, show=True):
	if len(word) == 0:
		if complete_blank: return opts[0] 
		else: return ""
	if word:
		opts = [ m[len(word):] for m in opts if m.startswith(word) ]
	if len(opts) == 1:
		return opts[0]
	if len(opts) == 0:
		return ""
	if show:
		return "{" + '|'.join(opts) + "}"
	else: return opts[0]

def completeFirst(word, opts, complete_blank=False, show=True):
	if(len(word.split(" ")) > 1):
		return complete(word.split(" ")[-1], opts,complete_blank, show)
	return complete(word, opts, complete_blank, show)

def completeType(word, complete_blank=False, show=True):
	return complete(word, types,complete_blank,show)

def completeMod(word, complete_blank=False, f2=False, show=False):
	if complete_blank:
		return completeFirst(word, modifiers, f2, show)
	return complete(word, modifiers, f2, show)


def completeArgs(word):
	if len(word.split(",")) > 1:
		word = word.split(",")[-1]
	if len(word) == 0: return ""
	if word[0] == " ":
		word = word[1:]
	args = []
	for i in types:
		if i[0].isupper():
			args.append(" ".join([i, rCamel(i)]))
		else: args.append(" ".join([i, i[0]]))
	completed = complete(word, args)
	if len(completed) == 0:
		if len(word.split(" ")) < 2:
			if word[0].isupper():
				return complete(word, [word + " " + rCamel(word)])
			else: return complete(word, [word + " " + word[0]]) 
		else: return complete(word.split(" ")[1], [rCamel(word.split(" ")[0])], True)
	else: return completed

def isNative(word):
	return (len(word) > 0) and (word[0].islower() or word == "String")

def get(t, n, s1="", s2=""):
	if( n == 1 ):
		r = completeMod(t[1],True,True)+" "
		return r
	if( n == 2 ):
		r = completeType(t[2],True)+" "
		return r
	if ( n == 3):
		r = "methodName("
		return r
	if ( n == 4):
		r = ""
		return r
	if ( n == 5):
		r = ") {\n\t\n\t}"
		return r
	return ""

endglobal

snippet j "expriment" !b
$1`!p snip.rv=get(t,1)`$2`!p snip.rv=get(t,2)`$3`!p snip.rv=get(t,3)`$4`!p snip.rv=get(t,4)`$5`!p snip.rv=get(t,5)`
endsnippet

snippet sleep "try sleep catch" !b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e){
	e.printStackTrace();
}
endsnippet

snippet m "method" !b
${1:private}`!p snip.rv = completeMod(t[1],True)
s = t[1]+completeMod(t[1], True)` ${2:void}`!p
snip.rv=completeType(t[2])` ${3:method}($4`!p
snip.rv = completeArgs(t[4])`)`!p
if s.find('abstract') > -1:
	snip.rv = ";"
else:
	snip.rv = " {\n\t\t"`$0`!p
if s.find('abstract') > -1:
	snip.rv = ""
else:
	snip.rv = "\n\t}"`

endsnippet

snippet /o|v/ "new Object or variable" !br
${1:Object}`!p s=t[1]+completeType(t[1])
snip.rv=completeType(t[1])` ${2:`!p
if isNative(s): snip.rv = s[0].lower()
elif len(s) > 0: snip.rv = rCamel(s)
else: snip.rv = ""`} = `!p
if isNative(s): snip.rv = "" 
else: snip.rv = "new " + s + "(" `${3}`!p
if isNative(s): snip.rv = ""
else: snip.rv = ")"`;$0
endsnippet

snippet f "field" !b
${1:private}`!p snip.rv = completeMod(t[1],True)` ${2:String}`!p s=t[2]+completeType(t[2])
snip.rv=completeType(t[2])` ${3:`!p
if isNative(s): snip.rv = s[0].lower()
elif len(s) > 0: snip.rv = rCamel(s)
else: snip.rv = ""`}`!p
if t[3].endswith("=") > 0:
	snip.rv = " new "+s+"("
else:
	snip.rv = ";"`$0`!p
if t[3].endswith("=") > 0:
	snip.rv = ");"
else:
	snip.rv = ""`
endsnippet

snippet ab "abstract" b
abstract 
endsnippet

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};$0
endsnippet

snippet at "assert true" !b
assertTrue(${1:actual});
endsnippet

snippet af "assert false" !b
assertFalse(${1:actual});$0
endsnippet

snippet ae "assert equals" !b
assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet br "break"
break;

endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet cle "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
}
endsnippet

snippet val "valueOf" !b
${1:String} ${2:str} = $1.valueOf($3);$0
endsnippet

snippet geti "get instanced" !b
${1:Object} ${2:`!p snip.rv = rCamel(t[1])`} = $1.getInstance();
endsnippet

snippet clc "class with constructor, fields, setter and getters" !b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tthis." + i[1] + " = " + i[1] + ";\n\t}\n"

	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\
	\n\t\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "class with constucutor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1]
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

snippet clc "class and constrcutor" b
public class `!p
snip.rv = snip.basename or "untitled"` {

	public `!p snip.rv = snip.basename or "untitled"`($2) {
		$0
	}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet /el(se)?/ "else" br
else`!p nl(snip)`{
	$0
}
endsnippet

snippet fi "final"
final 
endsnippet

snippet fore "for (each)" b
for (${1:String} ${2:`!p if len(t[1]) > 0: snip.rv= t[1][0].lower()`} : ${3:`!p snip.rv = rCamel(t[1]) + "s"`})`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet

snippet im "import"  b
import ${1:java}.${2:util}.$0
endsnippet

snippet in "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet cc "constuctor call or setter body" 
this.${1:var} = $1;
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet set "Collections Set" !b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<$1>();
endsnippet

snippet /Str?|str/ "String" !br
String 
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
 `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) { `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1]
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet

snippet main "main method" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet try "try/catch" !b
try {
	$1
} catch(${2:Exception} ${3:e}){
	${4:$3.printStackTrace();}
}
endsnippet

snippet mt "method throws" b!
${1:private} ${2:void} ${3:method}(${4}) ${5:throws $6 }{
	$0
}
endsnippet

snippet md "Method With javadoc" !b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 * `!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""` `!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet /get(ter)?/ "getter" !br
public ${1:String} get${2:Name}() {
	return `!p snip.rv = rCamel(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" !br
public void set${1:Name}(${2:String} $1) {
	return this.`!p snip.rv = rCamel(t[1])` = `!p snip.rv = rCamel(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" !br
public void set${1:Name}(${2:String} `!p snip.rv = rCamel(t[1])`) {
	this.`!p snip.rv = rCamel(t[1])` = `!p snip.rv = rCamel(t[1])`;
}

public $2 get$1() {
	return `!p snip.rv = rCamel(t[1])`;
}
endsnippet

snippet pa "package" b
package 
endsnippet

snippet p "println" b
System.out.println($1);$0
endsnippet

snippet pn "print no nl" b
System.out.print($1);$0
endsnippet

snippet pr "private" b
private 
endsnippet

snippet po "protected" b
protected 
endsnippet

snippet pu "public" b
public 
endsnippet

snippet re "return" b
return $1;$0
endsnippet

snippet "sta?" "static" r
static 
endsnippet

snippet sw "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet sy "synchronized"
synchronized 
endsnippet

snippet tc "test case"
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet bef "before test" !b
@Before
public void setup() {
	$0
}
endsnippet

snippet t "test" b
`!p junit(snip)`public void test${1:Name}() {
	$0
}
endsnippet

snippet tt "test throws" b
`!p junit(snip)`public void test${1:Name}() ${2:throws Exception }{
	$0
}
endsnippet

snippet th "throw" b
throw new $0
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

# vim:ft=snippets:
