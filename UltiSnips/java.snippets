## TODO
## 1. Scan current file for keywords
## 2. Fix indenting for clc and cn with snip +=
## 3. Remove \t which won't expand to spaces

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.

# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method 

global !p
import vim

runtime = [i for i in vim.eval('&runtimepath').split(',') if i.endswith('ultisnips') ][0]
# List of all classes to autocomplete
classes_file = runtime + '/java/all_classes.lst'
# List of just throwable/exception classes
exceptions_file = runtime + '/java/exceptions.lst'

# The name of the Logger field (could move this to g:ultisnips_java_logger_field)
logField = 'logger'
# Log levels you are using
logLevels = ['trace', 'debug', 'info', 'warn', 'error']

# types = ['int', 'boolean', 'Date', 'Calendar', 'void', 'long', 'Long', 'String', 'Integer', 'Double', 'double', 'InetAddress', ]
types = [i.strip() for i in open(classes_file) if len(i.strip()) > 2]

# Types that use `x = x.valueOf(yy);` instead of `x = new X();`
valueOfTypes = ['Double', 'Integer', 'Short', 'Long', 'Byte']

# All our type modifiers..
modifiers = ['private', 'public', 'static', 'final', 'synchronized', 'transient', 'protected', 'abstract']

# Small list annotations for completion
annotations = ['Override', 'Inject', 'Resource', 'Test', 'Before', 'After', 'BeforeClass', 'AfterClass', 'SupressWarning', 'Deprecated', 'Target', 'Rention']

def junit(snip):
    if snip.opt('g:ultisnips_java_junit', '') == '3':
        snip += ""
    else:
        snip.rv += '@Test\n\t'

def nl(snip):
    if snip.opt('g:ultisnips_java_brace_style', '') == 'nl':
        snip += ""
    else:
        snip.rv += " "

def getNewLine(snip, indent=""):
    if snip.opt('g:ultisnips_java_brace_style', '') == 'nl':
        return "\n"+snip.mkline(indent, "\t")
    else:
        return ' '

# Captures argument pairs from method sig -> x( ... )
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z><.]+ \w+')
	return [i.split(' ') for i in word.findall(group) ]

# Quick method to return method field name
def log():
	return logField

def camel(word):
	if len(word) > 0:
		return word[0].upper() + word[1:]
	else:
		return ''

def rCamel(word):
	if len(word) > 0:
		return word[0].lower() + word[1:]
	return ''
def complete(word, opts, complete_empty=False, show=True):
	if len(word) == 0:
		if complete_empty: return opts[0] 
		else: return ''
	if word:
		opts = [ m[len(word):] for m in opts if m.startswith(word) ]
	if len(opts) == 1:
		return opts[0]
	if len(opts) == 0:
		return ''
	if show:
		return '{' + '|'.join(opts) + '}'
	else: return opts[0]

def completeFirst(word, opts, complete_empty=False, show=True):
	return complete(word.split(' ')[-1], opts,complete_empty, show)

# Convinient completer methods for different scenarios
def completeType(word, complete_empty=False, show=False):
	return complete(word, types,complete_empty,show)

def completeMod(word, complete_empty=False, show=False):
	return completeFirst(word, modifiers, complete_empty, show)

def completeLogLevel(word):
	return complete(word, logLevels, True)

def completeAnnotation(word):
    return complete(word, annotations, True)

def completeException(word):
	exceptions = [i.strip() for i in open(exceptions_file) if i.startswith(word) ]
	return complete(word, exceptions, True, False)

def getArgName(typename):
	if len(typename) == 0: return ""
	if isNative(typename):
		return typename[0].lower()
	return rCamel(typename)

# Completer for argument pairs
def completeArgs(word):
	# Get last pair
	word = word.split(',')[-1]
	if len(word) == 0: return ''
	# Remove leading space
	if word[0] == ' ': word = word[1:]
	if len(word) == 0: return ''

	# Complete argument name
	if len(word.split(' ')) > 1:
		return complete(word.split(' ')[1], [getArgName(word.split(' ')[0])], True, False)

	# Complete type argument from known types
	args = [ ' '.join([i, getArgName(i)]) for i in types if i.startswith(word.split(' ')[0]) ]

	# Complete for unknown
	args.append(word + ' ' + getArgName(word))
	return complete(word, args, True, show=False)

def isNative(word):
	return (len(word) > 0) and (word[0].islower() or word == 'String')

def isValueOfType(word):
	return word in valueOfTypes

def createSetter(classname, name, snip):
	setter = snip.mkline("\tpublic void set" + camel(name) + "(" + classname + " " + name + ")" + getNewLine(snip) + "{") + "" \
				"\n" + snip.mkline("\t\tthis." + name + " = " + name + ";\n") + snip.mkline("\t}\n")
	return setter

def createGetter(classname, name, snip):
	getter = snip.mkline("\tpublic " + classname + " get" + camel(name) + "()" + getNewLine(snip) + "{") + "" \
				"\n" + snip.mkline("\t\treturn " + name + ";\n") + snip.mkline("\t}\n")
	return getter


endglobal

snippet cd "current dir" !b
`!p snip += os.path.dirname`
endsnippet

snippet sleep "try sleep catch" !b
try`!p nl(snip)`{
	Thread.sleep(${1:1000});
} catch (InterruptedException e)`!p nl(snip)`{
	e.printStackTrace();
}
endsnippet

snippet im "interface method" !b
$1`!p snip.rv = completeType(t[1],True,False)` ${2:method}($3`!p
snip.rv = completeArgs(t[3])`);
endsnippet

snippet m "method" !b
$1`!p snip.rv = completeMod(t[1],True,False)
s = t[1]+completeMod(t[1], True,False)` $2`!p
snip.rv=completeType(t[2], True,False)` ${3:method}($4`!p
snip.rv = completeArgs(t[4])`)`!p
if s.find('abstract') > -1:
	snip.rv = ";"
else:
	snip.rv=getNewLine(snip)+"{"
	snip += "\t" `$0`!p
if s.find('abstract') > -1:
	snip.rv = ""
else:
	snip += snip.mkline("}")`
endsnippet

snippet n "complete new" !w
new `!p snip.rv=vim.current.line.split(" ")[0].strip()`($1);$0
endsnippet

snippet /o|v/ "new Object or variable" !br
$1`!p s=t[1].strip()+completeType(t[1], True, False)
snip.rv=completeType(t[1], True, False)
if not t[1].endswith(' '): snip.rv+=' '`${2:`!p
snip.rv=getArgName(s)`} = `!p

if isNative(s):
	snip.rv = "" 
elif isValueOfType(s):
	snip.rv = s+".valueOf("
else:
	snip.rv = "new " + s + "(" `${3}`!p

if isNative(s): snip.rv = ""
else: snip.rv = ")"`;$0
endsnippet

snippet ex "type" !w
$1`!p snip.rv = completeException(t[1])`
endsnippet

snippet ty "type" !w
$1`!p snip.rv = completeType(t[1], True, False)`
endsnippet

snippet f "field" !b
$1`!p snip.rv = completeMod(t[1],True)` $2`!p s=t[2]+completeType(t[2], True,False)
snip.rv=completeType(t[2],True,False)` ${3:`!p
snip.rv=getArgName(s)`}`!p
if t[3].find("=") > -1:
	snip.rv = complete(t[3],[t[3][t[3].find("="):]+" new "+s+"("])
else:
	snip.rv = ";"`$0`!p
if t[3].find("=") > -1:
	snip.rv = ");"
else:
	snip.rv = ""`
endsnippet

snippet enu "enum" !b
$1`!p snip.rv=completeMod(t[1],True)` enum ${2:`!p snip.rv=snip.basename`}`!p nl(snip)`{ 
		$0
}
endsnippet

snippet @ "annotation" !b
@$1`!p snip.rv = completeAnnotation(t[1])`
endsnippet

snippet ab "abstract" b
abstract 
endsnippet

snippet as "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};$0
endsnippet

snippet at "assert true" !b
assertTrue(${1:actual});
endsnippet

snippet af "assert false" !b
assertFalse(${1:actual});$0
endsnippet

snippet ae "assert equals" !b
assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet br "break"
break;

endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet ca "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet logger "new logger" !b
private static final Logger `!p snip.rv = log()` = LoggerFactory.getLogger(`!p snip.rv = snip.basename`.class);
endsnippet

snippet cle "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent}} ${4:implements ${5:Interface}}`!p nl(snip)`{
	$0
}
endsnippet

snippet val "valueOf" !b
${1:String} ${2:str} = $1.valueOf($3);$0
endsnippet

snippet geti "get instanced" !b
${1:Object} ${2:`!p snip.rv = rCamel(t[1])`} = $1.getInstance();
endsnippet

snippet clc "class with constructor, fields, setter and getters" !b
public class `!p
snip.rv = snip.basename or "untitled"``!p nl(snip)`{
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
# Fields
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1)`!p snip.rv = getNewLine(snip)`{ `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\t" + snip.mkline("this." + i[1] + " = " + i[1] + ";")
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n" + createSetter(i[0], i[1], snip)

	snip.rv += "\n" + createGetter(i[0], i[1], snip)
`
}
endsnippet

snippet clc "class with constucutor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"``!p nl(snip)`{
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1)`!p nl(snip)`{ `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1]
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

snippet clc "class and constrcutor" b
public class `!p
snip.rv = snip.basename or "untitled"``!p nl(snip)`{

	public `!p snip.rv = snip.basename or "untitled"`($2)`!p nl(snip)`{
		$0
	}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`}`!p nl(snip)`{
	$0
}
endsnippet

snippet log "logger method" !b
`!p snip.rv=log()`.$1`!p snip.rv=completeLogLevel(t[1])`($2);  
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet fi "final"
final 
endsnippet

snippet foren "for each entry" !b
for (Entry<${1:String}, ${2:String}> ${3:e} : ${4:map}.entrySet()) {

}
endsnippet
snippet fore "for (each)" b
for (${1:String} ${2:`!p if len(t[1]) > 0: snip.rv= t[1][0].lower()`} : ${3:`!p snip.rv = rCamel(t[1]) + "s"`})`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	$2
}$0
endsnippet

snippet /el(se)?if/ "else if" wr
else if ($1)`!p nl(snip)`{
	$2
}$0
endsnippet

snippet /el(se)?/ "else" wr
else`!p nl(snip)`{
	$1
}$0
endsnippet

snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet

snippet "be(gin)?( (\S+))?" "begin{} / end{}" br
\begin{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "something"`}}
    ${2:${VISUAL}}
\end{$1}$0
endsnippet

snippet imp "import"  b
import ${1:java}.${2:util}.$0
endsnippet

snippet in "interface" b
${1:public} interface ${2:`!p snip.rv = snip.basename or "untitled"`} ${3:extends ${4:Parent}}`!p nl(snip)`{
	$0
}
endsnippet

snippet cc "constuctor call or setter body" 
this.${1:var} = $1;
endsnippet

snippet list "Collections List" w
List<${1:String}> ${2:list} = new ${3:Array}List<$1>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<$1, $2>();
endsnippet

snippet set "Collections Set" !b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<$1>();
endsnippet

snippet /Str?|str/ "String" !br
String 
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:})`!p nl(snip)`{
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
 `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1)`!p nl(snip)`{ `!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet try "try/catch" !b
try`!p nl(snip)`{
	${VISUAL}$0
} catch($2`!p snip.rv=completeException(t[2])` ${3:e})`!p nl(snip)`{
	${4:$3.printStackTrace();}
}
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet

snippet main "main method" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet mt "method throws" b!
${1:private} ${2:void} ${3:method}(${4}) ${5:throws $6}`!p nl(snip)`{
	$0
}
endsnippet

snippet md "Method With javadoc" !b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 * `!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""` `!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6}`!p nl(snip)`{
	$0
}
endsnippet

snippet /get(ter)?/ "getter" !br
public ${1:String} get${2:Name}()`!p nl(snip)`{
	return `!p snip.rv = rCamel(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" !br
public void set${1:Name}(${2:String} $1)`!p nl(snip)`{
	return this.`!p snip.rv = rCamel(t[1])` = `!p snip.rv = rCamel(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" !br
public void set${1:Name}(${2:String} `!p snip.rv = rCamel(t[1])`)`!p nl(snip)`{
	this.`!p snip.rv = rCamel(t[1])` = `!p snip.rv = rCamel(t[1])`;
}

public $2 get$1()`!p nl(snip)`{
	return `!p snip.rv = rCamel(t[1])`;
}
endsnippet

snippet pa "package" b
package 
endsnippet

snippet p "println" b
System.out.println($1);$0
endsnippet

snippet pn "print no nl" b
System.out.print($1);$0
endsnippet

snippet pr "private" b
private 
endsnippet

snippet po "protected" b
protected 
endsnippet

snippet pu "public" b
public 
endsnippet

snippet re "return" b
return $1;$0
endsnippet

snippet "sta" "static" w
static 
endsnippet

snippet sw "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet sy "synchronized"
synchronized 
endsnippet

snippet tc "test case"
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet bef "before test" !b
@Before
public void setup()`!p nl(snip)`{
	$0
}
endsnippet

snippet t "test" b
`!p junit(snip)`public void test${1:Name}()`!p nl(snip)`{
	$0
}
endsnippet

snippet tt "test throws" b
`!p junit(snip)`public void test${1:Name}() ${2:throws Exception}`!p nl(snip)`{
	$0
}
endsnippet

snippet th "throw" b
throw new $0;
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

# vim:ft=snippets:
